// Wyzer API utility for transaction management

const API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000/api';

// Helper function to handle API requests
async function apiRequest(endpoint, method = 'GET', data = null) {
  try {
    console.log(`Making ${method} request to ${endpoint}`);
    
    // Simplified headers for development - no authentication required
    const headers = {
      'Content-Type': 'application/json'
    };
    
    // Add token if available (but not required for development)
    const token = localStorage.getItem('token');
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    console.log('Request headers:', headers);
    
    const config = {
      method,
      headers,
      // Add credentials to ensure cookies are sent with the request
      credentials: 'include',
      // Ensure CORS is properly handled
      mode: 'cors'
    };
    
    if (data) {
      config.body = JSON.stringify(data);
      console.log('Request payload:', data);
    }
    
    console.log(`Sending request to: ${API_BASE}${endpoint}`);
    
    try {
      const response = await fetch(`${API_BASE}${endpoint}`, config);
      console.log(`Response status:`, response.status);
      
      // For CSV exports
      if (endpoint.includes('/export')) {
        const contentType = response.headers.get('content-type');
        if (contentType?.includes('text/csv')) {
          const csvText = await response.text();
          console.log('Received CSV response');
          return csvText;
        }
      }
      
      // Handle non-JSON responses
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const textResponse = await response.text();
        console.error('Non-JSON response:', textResponse);
        return {
          error: true,
          message: `Server returned non-JSON response: ${textResponse.substring(0, 100)}...`,
          data: getDefaultDataForEndpoint(endpoint)
        };
      }
      
      if (!response.ok) {
        const result = await response.json();
        console.error(`API error (${response.status}):`, result);
        return {
          error: true,
          message: result.message || `API request failed with status ${response.status}`,
          data: getDefaultDataForEndpoint(endpoint)
        };
      }
      
      const result = await response.json();
      console.log('Response data:', result);
      return result;
    } catch (fetchError) {
      console.error('Fetch error:', fetchError);
      return {
        error: true,
        message: fetchError.message || 'Network error occurred',
        data: getDefaultDataForEndpoint(endpoint)
      };
    }
  } catch (error) {
    console.error('API request failed:', error);
    return {
      error: true,
      message: error.message || 'Unknown error occurred',
      data: getDefaultDataForEndpoint(endpoint)
    };
  }
}

// Helper function to provide empty data structures for different endpoints when API calls fail
function getDefaultDataForEndpoint(endpoint) {
  console.log(`Returning empty data structure for endpoint: ${endpoint}`);
  
  // Return appropriate empty data structure based on the endpoint
  if (endpoint.includes('/transactions')) {
    return {
      transactions: [],
      total: 0
    };
  } else if (endpoint.includes('/category-summary')) {
    return {
      categories: [],
      total: 0
    };
  } else if (endpoint.includes('/stats')) {
    return {
      summary: {
        totalIncome: 0,
        totalExpenses: 0,
        netSavings: 0
      },
      monthly: []
    };
  } else if (endpoint.includes('/dashboard')) {
    return {
      spendingData: [],
      monthlyData: [],
      recentTransactions: [],
      summary: {
        totalIncome: 0,
        totalExpenses: 0,
        netSavings: 0
      }
    };
  } else {
    // Default empty response
    return {
      data: [],
      total: 0
    };
  }
}

// Get all transactions with optional filtering
export async function getTransactions(filters = {}) {
  // Build query parameters for the API request
  let queryParams = new URLSearchParams();
  
  // Add filters to query params
  if (filters.startDate) queryParams.append('startDate', filters.startDate);
  if (filters.endDate) queryParams.append('endDate', filters.endDate);
  if (filters.type) queryParams.append('type', filters.type);
  if (filters.category_id) queryParams.append('category_id', filters.category_id);
  if (filters.minAmount) queryParams.append('minAmount', filters.minAmount);
  if (filters.maxAmount) queryParams.append('maxAmount', filters.maxAmount);
  if (filters.search) queryParams.append('search', filters.search);
  if (filters.limit) queryParams.append('limit', filters.limit);
  if (filters.offset) queryParams.append('offset', filters.offset);
  
  const queryString = queryParams.toString();
  const endpoint = `/transactions${queryString ? `?${queryString}` : ''}`;
  
  return apiRequest(endpoint);
}

// Get a single transaction by ID
export async function getTransactionById(id) {
  return apiRequest(`/transactions/${id}`);
}

// Create a new transaction
export async function createTransaction(transactionData) {
  return apiRequest('/transactions', 'POST', transactionData);
}

// Update an existing transaction
export async function updateTransaction(id, transactionData) {
  return apiRequest(`/transactions/${id}`, 'PUT', transactionData);
}

// Delete a transaction
export async function deleteTransaction(id) {
  return apiRequest(`/transactions/${id}`, 'DELETE');
}

// Get transaction statistics
export async function getTransactionStats(startDate, endDate) {
  let queryParams = new URLSearchParams();
  queryParams.append('startDate', startDate);
  queryParams.append('endDate', endDate);
  
  return apiRequest(`/transactions/stats?${queryParams.toString()}`);
}

// Bulk import transactions
export async function bulkImportTransactions(transactions) {
  return apiRequest('/transactions/bulk', 'POST', { transactions });
}

// Export transactions to CSV
export async function exportTransactions(filters = {}) {
  try {
    let queryParams = new URLSearchParams();
    
    // Add filters to query params
    if (filters.startDate) queryParams.append('startDate', filters.startDate);
    if (filters.endDate) queryParams.append('endDate', filters.endDate);
    if (filters.type) queryParams.append('type', filters.type);
    if (filters.category_id) queryParams.append('category_id', filters.category_id);
    
    const queryString = queryParams.toString();
    const endpoint = `/transactions/export${queryString ? `?${queryString}` : ''}`;
    
    // Get the token if available
    const token = localStorage.getItem('token');
    const headers = token ? { Authorization: `Bearer ${token}` } : {};
    
    // Create a hidden anchor element to trigger the download
    const link = document.createElement('a');
    link.href = `${API_BASE}${endpoint}`;
    
    // Add authorization header if available
    if (token) {
      // For direct download with authorization, we need to fetch the file first
      const response = await fetch(`${API_BASE}${endpoint}`, {
        method: 'GET',
        headers
      });
      
      if (!response.ok) {
        throw new Error(`Export failed with status ${response.status}`);
      }
      
      // Get the blob from the response
      const blob = await response.blob();
      
      // Create a URL for the blob
      const url = window.URL.createObjectURL(blob);
      link.href = url;
      
      // Get the filename from the Content-Disposition header or use a default
      const contentDisposition = response.headers.get('Content-Disposition');
      const filename = contentDisposition
        ? contentDisposition.split('filename=')[1].replace(/"/g, '')
        : `transactions-${new Date().toISOString().split('T')[0]}.csv`;
      
      link.download = filename;
    } else {
      // If no token, direct download should work
      link.download = `transactions-${new Date().toISOString().split('T')[0]}.csv`;
    }
    
    // Append to body, click and remove
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    return { success: true, message: 'Export started' };
  } catch (error) {
    console.error('Error exporting transactions:', error);
    return { error: true, message: error.message || 'Failed to export transactions' };
  }
}
